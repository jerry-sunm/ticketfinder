package ticket.finder.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import ticket.finder.dto.ShowXShow;
import ticket.finder.dto.TfUser;
import ticket.finder.exception.LoginAuthFailException;
import ticket.finder.exception.UserIdExistsException;
import ticket.finder.exception.UserNotFoundException;
import ticket.finder.exception.WrongJoinException;
import ticket.finder.service.CsService;
import ticket.finder.service.FaqService;
import ticket.finder.service.FcltyXService;
import ticket.finder.service.QuestionService;
import ticket.finder.service.RefundService;
import ticket.finder.service.ReviewService;
import ticket.finder.service.ShowXShowService;
import ticket.finder.service.TfOrderService;
import ticket.finder.service.TfUserService;

@Controller
public class UserController {
	@Autowired
	private CsService scService;
	
	@Autowired
	private FaqService faqService;
	
	@Autowired
	private FcltyXService fcltyXService;
	
	@Autowired
	private QuestionService questionService;
	
	@Autowired
	private RefundService refundService;
	
	@Autowired
	private ReviewService reviewService;
	
	@Autowired
	private ShowXShowService showXShowService;
	
	@Autowired
	private TfOrderService tfOrderService;
	
	@Autowired
	private TfUserService tfUserService;
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String index(Model model) {
		List<ShowXShow> whatshot = showXShowService.getShowHot();
		model.addAttribute("whatshot", whatshot);
		
		Map<String, String> hotGenre1 = new HashMap<String, String>();
		hotGenre1.put("genre1", "musical");
		hotGenre1.put("genre2", "play");
		List<ShowXShow> hotGenreList1 = showXShowService.getHotGenre(hotGenre1);
		model.addAttribute("hotGenreList1", hotGenreList1);
		
		Map<String, String> hotGenre2 = new HashMap<String, String>();
		hotGenre2.put("genre1", "concert");
		hotGenre2.put("genre2", "classic");
		List<ShowXShow> hotGenreList2 = showXShowService.getHotGenre(hotGenre2);
		model.addAttribute("hotGenreList2", hotGenreList2);
		
		return "user/include/main";
	}

	/*
	@RequestMapping(value = "/perform/{genre}", method = RequestMethod.GET)
	public String perform(@PathVariable String genre) {
		return "user/include/perform";
	}
	@RequestMapping(value = "/perform_detail", method = RequestMethod.GET)
	public String performDetail() {
		return "user/include/perform_detail";
	}
	 */
	
	@RequestMapping(value = "/rank", method = RequestMethod.GET)
	public String rank() {
		return "user/include/rank";
	}
	
	@RequestMapping(value = "/region", method = RequestMethod.GET)
	public String region() {
		return "user/include/region";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "user/include/login";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(@ModelAttribute TfUser tfUser, HttpSession session) throws LoginAuthFailException, UserNotFoundException {
		tfUserService.loginAuth(tfUser);
		
		session.setAttribute("loginUserInfo", tfUserService.getUser(tfUser.getUserId()));
		if(session.getAttribute("URI")!=null) {
			String URI=(String)session.getAttribute("URI");
			session.removeAttribute("URI");
			return "redirect:"+URI;
		}
		return "user/include/login";
	}
	
	@RequestMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String join() {
		return "user/include/join";
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String join(@ModelAttribute TfUser tfUser) throws UserIdExistsException, WrongJoinException {
		tfUserService.addUser(tfUser);
		return "user/include/login";
	}
	
	@RequestMapping(value = "/userInfo", method = RequestMethod.GET)
	public String userinfo() {
		return "user/include/userInfo";
	}
	
	@RequestMapping(value = "/userInfo", method = RequestMethod.POST)
	public String userinfo(@ModelAttribute TfUser tfUser, Model model) throws UserNotFoundException {
		model.addAttribute("userinfo", tfUserService.getUser(tfUser.getUserId()));
		return "user/include/userInfo";
	}
	
	@RequestMapping(value = "/myticket", method = RequestMethod.GET)
	public String myticket() {
		return "user/include/myPage";
	}
	
	/*
	@RequestMapping(value = "/cs", method = RequestMethod.GET)
	public String cs() {
		return "user/include/cs";
	}
	
	@RequestMapping(value = "/cs_info", method = RequestMethod.GET)
	public String csInfo() {
		return "user/include/csInfo";
	}
	*/
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public String search() {
		return "user/include/search";
	}
	
	@RequestMapping(value = "/book_detail", method = RequestMethod.GET)
	public String bookDetail() {
		return "user/include/bookDetail";
	}
	
	@RequestMapping(value = "/book_more", method = RequestMethod.GET)
	public String bookMore() {
		return "user/include/bookMore";
	}
	
	@RequestMapping(value = "/find_id", method = RequestMethod.GET)
	public String findId() {
		return "user/include/findId";
	}
	
	@RequestMapping(value = "/find_id", method = RequestMethod.POST)
	public String findId(String name, String email) {
		return "user/include/findId";
	}
	
	@RequestMapping(value = "/find_pw", method = RequestMethod.GET)
	public String findPw() {
		return "user/include/findPw";
	}
	
	@RequestMapping(value = "/find_pw", method = RequestMethod.POST)
	public String findPw(String name, String email) {
		return "user/include/findPw";
	}
	
	@RequestMapping(value = "/modify_pw", method = RequestMethod.GET)
	public String modifyPW() {
		return "user/include/modifyPW";
	}
	
	@RequestMapping(value = "/pw_check", method = RequestMethod.GET)
	public String pwCheck() {
		return "user/include/passwordCheck";
	}
	
	@RequestMapping(value = "/privacypolicy", method = RequestMethod.GET)
	public String privacypolicy() {
		return "user/include/terms/privacypolicy";
	}
	
	/*
	@RequestMapping(value = "/qna", method = RequestMethod.GET)
	public String qna() {
		return "user/include/qna";
	}
	
	@RequestMapping(value = "/review_write", method = RequestMethod.GET)
	public String reviewWrite() {
		return "user/include/review_write";
	}
	*/
	
	@RequestMapping(value = "/review_more", method = RequestMethod.GET)
	public String reviewMore() {
		return "user/include/reviewMore";
	}
	
	@RequestMapping(value = "/service", method = RequestMethod.GET)
	public String service() {
		return "user/include/terms/service";
	}
	
	@RequestMapping(value = "/terms", method = RequestMethod.GET)
	public String terms() {
		return "user/include/terms";
	}
	
	/*
	@RequestMapping(value = "/theater", method = RequestMethod.GET)
	public String theater() {
		return "user/include/theater";
	}
	*/
	
	@RequestMapping(value = "/user_info", method = RequestMethod.GET)
	public String userInfo() {
		return "user/include/userInfo";
	}
}












