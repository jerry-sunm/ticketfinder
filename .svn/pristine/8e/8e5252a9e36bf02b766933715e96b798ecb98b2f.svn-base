<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/images/**" location="/resources/user/images/" />
	<resources mapping="/css/**" location="/resources/user/css/" />
	<resources mapping="/js/**" location="/resources/user/js/" />
	<resources mapping="/common/**" location="/resources/user/common/" />
	<resources mapping="/lib/**" location="/resources/user/lib/" />
	
	<resources mapping="/a_images/**" location="/resources/admin/images/" />
	<resources mapping="/a_css/**" location="/resources/admin/css/" />
	<resources mapping="/a_js/**" location="/resources/admin/js/" />
	<resources mapping="/a_plugins/**" location="/resources/admin/plugins/" />
	<resources mapping="/a_data/**" location="/resources/admin/data/" />
	
	<!-- UrlBasedViewResolver : Spring에서 제공하는 ViewResolver를 사용하지 않고 외부에서 제공하는 ViewResolver를 사용하는 기능을 제공하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 외부에서 제공하는 ViewResolver 클래스명을 인젝션 처리 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 우선순위 관련 정수값을 인젝션 처리 -->
		<!-- => 정수값이 낮을 수록 우선순위 높게 설정된다. -->
		<beans:property name="order" value="2"/>
	</beans:bean>

	<!-- TilesConfigurer : TilesView 프로그램에서 사용할 뷰페이지 정보를 제공하는 XML 파일 정보를 저장한 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 xml파일 경로를 배열에 저장하여 인젝션 처리 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
	
	<context:component-scan base-package="ticket.finder.controller" />
	<context:component-scan base-package="ticket.finder.dao" />
	<context:component-scan base-package="ticket.finder.service" />
	<context:component-scan base-package="ticket.finder.mapper" />
</beans:beans>
