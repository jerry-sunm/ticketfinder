package ticket.finder.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.multipart.MultipartFile;

import ticket.finder.dto.Question;
import ticket.finder.dto.TfShow;
import ticket.finder.dto.TfUser;
import ticket.finder.exception.QuestionNotFoundException;
import ticket.finder.service.CsService;
import ticket.finder.service.FaqService;
import ticket.finder.service.FcltyXService;
import ticket.finder.service.QuestionService;
import ticket.finder.service.RefundService;
import ticket.finder.service.ReviewService;
import ticket.finder.service.ShowXShowService;
import ticket.finder.service.TfOrderService;
import ticket.finder.service.TfShowService;
import ticket.finder.service.TfUserService;

@Controller
public class AdminController implements ApplicationContextAware {
	@Autowired
	private CsService scService;
	
	@Autowired
	private FaqService faqService;
	
	@Autowired
	private FcltyXService fcltyXService;
	
	@Autowired
	private QuestionService questionService;
	
	@Autowired
	private RefundService refundService;
	
	@Autowired
	private ReviewService reviewService;
	
	@Autowired
	private ShowXShowService showXShowService;
	
	@Autowired
	private TfOrderService tfOrderService;
	
	@Autowired
	private TfUserService tfUserService;
	
	@Autowired
	private TfShowService tfShowService;
	
	@Autowired
	private WebApplicationContext context;
	
	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		context=(WebApplicationContext)applicationContext;
	}
	
	@RequestMapping(value = "/main.admin", method = RequestMethod.GET)
	public String main(Model model) {
		List<TfShow> tfShowList=tfShowService.getEndTfShow();
		model.addAttribute("tfShowList", tfShowList);
		return "admin/adm_main";
	}
	
	@RequestMapping(value = "/userlist.admin", method = RequestMethod.GET)
	public String userList(Model model) {
		model.addAttribute("userList", tfUserService.getUserList());
		return "admin/adm_user_list";
	}
	
	@RequestMapping(value = "/usermanage.admin", method = RequestMethod.GET)
	public String userManage(Model model) {
		model.addAttribute("dormantUserList", tfUserService.getDormantUserList());
		model.addAttribute("dormantedUserList", tfUserService.getDormantedUserList());
		return "admin/adm_user_manage";
	}
	
	@RequestMapping(value = "/show.admin", method = RequestMethod.GET)
	public String show(Model model) {
		model.addAttribute("showList", showXShowService.getSelectShowList());
		model.addAttribute("concertList", showXShowService.getSelectConcerList());
		model.addAttribute("musicalList", showXShowService.getSelectMusicalList());
		model.addAttribute("playList", showXShowService.getSelectPlayList());
		model.addAttribute("classicList", showXShowService.getSelectClassicList());
		model.addAttribute("endShowList", showXShowService.getSelectEndShowList());
		return "admin/adm_show_list";
	}
	
	@RequestMapping(value = "/deposit.admin", method = RequestMethod.GET)
	public String deposit(Model model) {
		model.addAttribute("unpaidOrderList", tfOrderService.getUnpaidOrderList());
		return "admin/adm_deposit";
	}
	
	@RequestMapping(value = "/delivery.admin", method = RequestMethod.GET)
	public String delivery(Model model) {
		model.addAttribute("ShOrderList", tfOrderService.getShOrderList());
		return "admin/adm_delivery";
	}
	
	@RequestMapping(value = "/ticketing.admin", method = RequestMethod.GET)
	public String ticketing() {
		return "admin/adm_ticketing";
	}
	
	@RequestMapping(value = "/order.admin", method = RequestMethod.GET)
	public String order() {
		return "admin/adm_order_list";
	}
	
	@RequestMapping(value = "/refund.admin", method = RequestMethod.GET)
	public String refund() {
		return "admin/adm_refund";
	}
	
	@RequestMapping(value = "/sttsshow.admin", method = RequestMethod.GET)
	public String sttsShow(Model model) {
		model.addAttribute("tfShowList", tfShowService.getTfShowList());
		return "admin/adm_stts_show";
	}
	
	@RequestMapping(value = "/sttstheater.admin", method = RequestMethod.GET)
	public String sttsTheater(Model model) {
		return "admin/adm_stts_theater";
	}
	
	@RequestMapping(value = "/sttssales.admin", method = RequestMethod.GET)
	public String sttsSales() {
		return "admin/adm_stts_sales";
	}
	
	@RequestMapping(value = "/sttsticket.admin", method = RequestMethod.GET)
	public String sttsTicket(Model model) {
		model.addAttribute("tfShowList", tfShowService.getTfShowList());
		return "admin/adm_stts_ticket";
	}
	
	@RequestMapping(value = "/review.admin", method = RequestMethod.GET)
	public String review(Model model) {
		model.addAttribute("reviewSdList", reviewService.getReviewSdList());
		return "admin/adm_review";
	}
	
	@RequestMapping("/question.admin")
	public String question(Model model) {
		model.addAttribute("questionList", questionService.getQuestionList());
		return "admin/adm_question_oto";
	}
	
	
	@RequestMapping(value = "/questionreply.admin", method = RequestMethod.GET)
	public String questionReply(@RequestParam int num, Model model, HttpSession session) throws QuestionNotFoundException {
		TfUser tfUser=(TfUser)session.getAttribute("loginTfUser");
		model.addAttribute("question", questionService.getQuestion(num));
		return "admin/adm_question_oto_reply";
	}
	
	@RequestMapping(value = "/questionreply.admin", method = RequestMethod.POST)
	public String questionReply(@ModelAttribute Question question, 
			@RequestParam(required = false) MultipartFile questionFileM, 
			HttpSession session) throws IllegalStateException, IOException, QuestionNotFoundException {
		System.out.println(question.getQuestionCategory());
		if(questionFileM==null) {
			question.setQuestionFile("");
			//return "/questionreply.admin";
		}
		
		String uploadDirPath=context.getServletContext().getRealPath("/resources/upload");
		
		String originalFilename=questionFileM.getOriginalFilename();
		File file=new File(uploadDirPath, originalFilename);
		String uploadFilename=originalFilename;
		try {
			int i=0;
			while(file.exists()) { //서버에 입력파일과 같은 이름의 파일이 존재할 경우
				i++;
				int index=originalFilename.lastIndexOf(".");
				//입력파일명 뒤에 "_숫자"를 추가하여 변경
				uploadFilename=originalFilename.substring(0, index)
						+"_"+i+originalFilename.substring(index);
				file=new File(uploadDirPath, uploadFilename);
				questionFileM.transferTo(file);
				question.setQuestionFile(uploadFilename);
			}
		} catch (StringIndexOutOfBoundsException e) {
			
		}
		
		
		
		
		questionService.addQuestion(question);
		questionService.modifyStateQuestion(question.getQuestionState(), question.getQuestionRef());
		return "admin/adm_question_oto";
	}
	
	@RequestMapping(value = "/faqlist.admin", method = RequestMethod.GET)
	public String faqList(Model model) {
		model.addAttribute("faqCountList", faqService.getCountFaq());
		model.addAttribute("faqCategoryOne", faqService.getCategoryFaqOne());
		model.addAttribute("faqCategoryTwo", faqService.getCategoryFaqTwo());
		model.addAttribute("faqCategoryThree", faqService.getCategoryFaqThree());
		return "admin/adm_faq_list";
	}
	
	@RequestMapping(value = "/faqadd.admin", method = RequestMethod.GET)
	public String faqAdd() {
		return "admin/adm_faq_add";
	}
	
	@RequestMapping(value = "/faqadd.admin", method = RequestMethod.POST)
	public String faqAdd(@ModelAttribute String id) {
		return "admin/adm_faq_add";
	}
	
	@RequestMapping(value = "/logout.admin")
	public String logout(HttpSession session) {
		session.invalidate();
		return "admin/main";
	}
}
