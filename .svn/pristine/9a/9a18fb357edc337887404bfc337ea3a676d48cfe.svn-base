package ticket.finder.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ticket.finder.exception.FcCodeNotFoundException;
import ticket.finder.service.CsService;
import ticket.finder.service.FaqService;
import ticket.finder.service.FcltyXService;
import ticket.finder.service.QuestionService;
import ticket.finder.service.RefundService;
import ticket.finder.service.ReviewService;
import ticket.finder.service.ShowXShowService;
import ticket.finder.service.TfOrderService;
import ticket.finder.service.TfUserService;
import ticket.finder.util.Pager;

@Controller
public class RawController {
	@Autowired
	private CsService csService;
	
	@Autowired
	private FaqService faqService;
	
	@Autowired
	private FcltyXService fcltyXService;
	
	@Autowired
	private QuestionService questionService;
	
	@Autowired
	private RefundService refundService;
	
	@Autowired
	private ReviewService reviewService;
	
	@Autowired
	private ShowXShowService showXShowService;
	
	@Autowired
	private TfOrderService tfOrderService;
	
	@Autowired
	private TfUserService tfUserService;
	
	
	
	
	@RequestMapping(value = "/perform/{genre}", method = RequestMethod.GET)
	public String perform(@PathVariable String genre, Model model) {
		model.addAttribute("showGenreList", showXShowService.gettGenreList(genre));
		return "user/include/perform";
	}
	
	@RequestMapping(value = "/perform_detail", method = RequestMethod.GET)
	public String performDetail() {
		return "user/include/perform_detail";
	}
	
	
	@RequestMapping(value = "/cs", method = RequestMethod.GET)
	public String cs(Model model) {
		model.addAttribute("csList", csService.getCsList());
		//model.addAttribute("faqList", faqService.getFaqList());
		return "user/include/cs";
	}
	
	@RequestMapping(value = "/cs_list", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> csList(@RequestParam(defaultValue = "1") int pageNum) {
		
		//REST_BOARD 테이블에 저장된 게시글의 갯수를 반환받아 저장
		int totalBoard=csService.getCsCount();
		
		int pageSize=5;//페이지에 출력될 게시글의 갯수 저장
		int blockSize=5;//페이지 블럭에 출력될 페이지의 갯수 저장
		
		Pager pager=new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		//Service 클래스의 메소드를 호출하기 위해 매개변수에 전달될 Map 객체 생성
		Map<String, Object> pagerMap=new HashMap<String, Object>();
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		//요청처리 메소드의 반환값으로 사용될 Map 객체 생성
		// => 응답결과를 Map 객체의 엔트리(Entry)로 저장하여 반환 - Entry >> JSON(JavaScript 객체)
		Map<String, Object> returnMap=new HashMap<String, Object>();
		returnMap.put("csBoardList", csService.getCsBoardList(pagerMap));
		returnMap.put("pager",pager);		
		returnMap.put("totalBoard",totalBoard);		
		
		return returnMap;
	}
	
	@RequestMapping(value = "/csInfo", method = RequestMethod.GET)
	public String csInfo() {
		return "user/include/csInfo";
	}
	
	
	@RequestMapping(value = "/qna", method = RequestMethod.GET)
	public String qna() {
		return "user/include/qna";
	}
	
	@RequestMapping(value = "/review_write", method = RequestMethod.GET)
	public String reviewWrite() {
		return "user/include/review_write";
	}
	
	@RequestMapping(value = "/theater", method = RequestMethod.GET)
	public String theater(Model model, String fcCode) throws FcCodeNotFoundException {
		model.addAttribute("fcltyList", fcltyXService.getFcltyList());
		if(fcCode==null || fcCode.equals("")) { 
			fcCode="FC000001"; 
		}
		model.addAttribute("fclty", fcltyXService.getFclty(fcCode));
		model.addAttribute("fcShowList", showXShowService.getFcltyShow(fcCode));
		return "user/include/theater";
	}
}












