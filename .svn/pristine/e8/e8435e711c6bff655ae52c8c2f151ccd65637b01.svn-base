package ticket.finder.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import ticket.finder.dto.Cs;
import ticket.finder.dto.Faq;
import ticket.finder.dto.OrderDShow;
import ticket.finder.dto.OrderQShow;
import ticket.finder.dto.OrderRefund;
import ticket.finder.dto.ShowXShow;
import ticket.finder.dto.TfUser;
import ticket.finder.exception.CsNotFoundException;
import ticket.finder.exception.FcCodeNotFoundException;
import ticket.finder.exception.OrderNotFoundException;
import ticket.finder.service.CsService;
import ticket.finder.service.FaqService;
import ticket.finder.service.FcltyXService;
import ticket.finder.service.QuestionService;
import ticket.finder.service.RefundService;
import ticket.finder.service.ReviewService;
import ticket.finder.service.ShowXShowService;
import ticket.finder.service.TfOrderService;
import ticket.finder.service.TfUserService;
import ticket.finder.util.Pager;

@Controller
public class RawController {
	@Autowired
	private CsService csService;
	
	@Autowired
	private FaqService faqService;
	
	@Autowired
	private FcltyXService fcltyXService;
	
	@Autowired
	private QuestionService questionService;
	
	@Autowired
	private RefundService refundService;
	
	@Autowired
	private ReviewService reviewService;
	
	@Autowired
	private ShowXShowService showXShowService;
	
	@Autowired
	private TfOrderService tfOrderService;
	
	@Autowired
	private TfUserService tfUserService;
	
	
	@RequestMapping(value = "/perform/{genre}", method = RequestMethod.GET)
	public String perform(@PathVariable String genre, Model model) {
		model.addAttribute("genreNewList", showXShowService.getGenreNew(genre));
		Map<String, String> map=new HashMap<String, String>();
		map.put("date", "7");
		map.put("sGenre", genre);
		//List<OrderDShow> rankInfo = tfOrderService.getRankGenre(map);
		
		model.addAttribute("randomArea", showXShowService.getRandomArea(genre));
		return "user/include/perform";
	}
	
	@RequestMapping(value = "/perform_detail/{sCode}/{showArea}", method = RequestMethod.GET)
	public String performDetail(@PathVariable String sCode, @PathVariable String showArea, Model model) {
		model.addAttribute("showInfo", showXShowService.getDaytimeList(sCode, showArea));
		return "user/include/perform_detail";
	}
	
	
	@RequestMapping(value = "/cs", method = RequestMethod.GET)
	public String cs(Model model) {
		return "user/include/cs";
	}
	
	@RequestMapping(value = "/cs_list", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> csList(@RequestParam(defaultValue = "1") int pageNum) {
		Map<String, String> map=new HashMap<String, String>();
		int totalBoard=csService.getCsCount(map);
		int pageSize=5;
		int blockSize=5;
		
		Pager pager=new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		Map<String, Object> pagerMap=new HashMap<String, Object>();
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		Map<String, Object> returnMap=new HashMap<String, Object>();
		returnMap.put("csBoardList", csService.getCsBoardList(pagerMap));
		returnMap.put("pager",pager);		
		returnMap.put("totalBoard",totalBoard);		
		
		return returnMap;
	}
	
	@RequestMapping(value = "/csRe/{pageNum}/{csNum}/{rn}", method = RequestMethod.GET)
	public String csInfo(@PathVariable int pageNum, @PathVariable int csNum, @PathVariable int rn, RedirectAttributes attributes) throws CsNotFoundException {
		attributes.addFlashAttribute("csInfoList", csService.getCs(csNum));
		attributes.addFlashAttribute("rn", rn);
		attributes.addFlashAttribute("pageNum", pageNum);
		
		return "redirect:/csInfo";
	}
	
	@RequestMapping(value = "/csInfo", method = RequestMethod.GET)
	public String csInfo(Model model) throws CsNotFoundException {
		return "user/include/csInfo";
	}
	
	@RequestMapping(value = "/csCate", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> csCate(@RequestParam() String csCategory, @RequestParam(defaultValue = "1") int pageNum) {
		Map<String, String> map=new HashMap<String, String>();
		map.put("csCategory", csCategory);
		int totalBoard=csService.getCsCount(map);
		int pageSize=5;
		int blockSize=5;
		
		Pager pager=new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		Map<String, Object> pagerMap=new HashMap<String, Object>();
		pagerMap.put("csCategory", csCategory);
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		Map<String, Object> cateMap=new HashMap<String, Object>();
		cateMap.put("csBoardList", csService.getCsBoardList(pagerMap));
		cateMap.put("pager",pager);		
		cateMap.put("totalBoard",totalBoard);		
		
		return cateMap;
	}
	
	@RequestMapping(value = "/faq", method = RequestMethod.GET)
	public String faq(Model model) {
		return "user/include/faq";
	}
	
	@RequestMapping(value = "/faq_list", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> faqList(@RequestParam(required = false) String faqCategory, @RequestParam(defaultValue = "1") int pageNum) {
		int totalBoard;
		System.out.println("faqCategory="+faqCategory);
		if(faqCategory.equals("전체") || faqCategory=="전체") {
			totalBoard=faqService.getFaqList().size();
		} else {
			totalBoard=faqService.getCategoryFaq(faqCategory).size();
		}
		System.out.println("totalBoard="+totalBoard);
		int pageSize=5;
		int blockSize=5;
		
		Pager pager=new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		Map<String, Object> pagerMap=new HashMap<String, Object>();
		pagerMap.put("faqCategory", faqCategory);
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		Map<String, Object> returnMap=new HashMap<String, Object>();
		returnMap.put("faqBoardList", faqService.getFaqBoardList(pagerMap));
		returnMap.put("pager",pager);		
		returnMap.put("totalBoard",totalBoard);		
		
		return returnMap;
	}
	
	@RequestMapping(value = "/faq_search", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> faqSearch(@RequestParam(required = false) String faq, @RequestParam(defaultValue = "1") int pageNum) {
		System.out.println("faq="+faq);
		int totalBoard=faqService.getKeywordFaq(faq).size();
		System.out.println("totalBoard="+totalBoard);
		int pageSize=5;
		int blockSize=5;
		
		Pager pager=new Pager(pageNum, totalBoard, pageSize, blockSize);
		
		Map<String, Object> pagerMap=new HashMap<String, Object>();
		pagerMap.put("faq", faq);
		pagerMap.put("startRow", pager.getStartRow());
		pagerMap.put("endRow", pager.getEndRow());
		
		Map<String, Object> returnMap=new HashMap<String, Object>();
		returnMap.put("faqKeywordList", faqService.getFaqBoardList(pagerMap));
		returnMap.put("pager",pager);		
		returnMap.put("totalBoard",totalBoard);		
		
		return returnMap;
	}
	
	@RequestMapping(value = "/qna", method = RequestMethod.GET)
	public String question(HttpSession session, Model model) {
		String id=((TfUser)session.getAttribute("loginUserInfo")).getUserId();
		model.addAttribute("qnaList", questionService.getUserQuestionIdList(id));
		return "user/include/qna";
	}
	
	@RequestMapping(value = "/qna_write", method = RequestMethod.GET)
	public String qna(HttpSession session, Model model) throws OrderNotFoundException {
		String id=((TfUser)session.getAttribute("loginUserInfo")).getUserId();
		System.out.println("아이디="+id);
		Map<String, String> map=new HashMap<String, String>();
		map.put("userId", id);
		//model.addAttribute("userShowList", tfOrderService.getUserOrderList(map));
		model.addAttribute("userid", id);
		return "user/include/qna_write";
	}
	
	@RequestMapping(value = "/qna_show_list", method = RequestMethod.GET)
	@ResponseBody
	public List<OrderQShow> question(@RequestParam String userid) throws OrderNotFoundException {
		Map<String, String> map=new HashMap<String, String>();
		map.put("userid", userid);
		System.out.println("userid="+userid);
		List<OrderQShow> showList=tfOrderService.getOrderQshow(map);
		System.out.println("사이즈="+showList.size());
		return showList;
	}
	
	@RequestMapping(value = "/review_write", method = RequestMethod.GET)
	public String reviewWrite() {
		return "user/include/review_write";
	}
	
	@RequestMapping(value = "/theater", method = RequestMethod.GET)
	public String theater(Model model, String fcCode) throws FcCodeNotFoundException {
		model.addAttribute("fcltyList", fcltyXService.getFcltyList());
		if(fcCode==null || fcCode.equals("")) { 
			fcCode="FC000001"; 
		}
		model.addAttribute("fclty", fcltyXService.getFclty(fcCode));
		model.addAttribute("fcShowList", showXShowService.getFcltyShow(fcCode));
		return "user/include/theater";
	}
}












